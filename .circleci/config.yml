version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.  
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.    
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=`curl -H "token: c1b1e3ca-9ad3-4e51-a6ba-8693a7450b4e" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}`
            if [[ $SUCCESS == "Migration Successful" ]];
            then
              echo "REVERTING THE MIGRATIONS"
              cd backend
              npm install
              npm run migrations:revert
            else
              echo "NO REVERT REQUIRED"
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd ./frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd ./backend
             npm i
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test front-end
          command: |
            cd ./frontend
            sudo npm install oauth-sign
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test back-end
          command: |
            cd ./backend
            npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Analyse front-end
          command: |
            cd ./frontend
            npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Analyse back-end
          command: |
            cd ./backend
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar
          command: |
            yum install -y tar
      - run:
          name: Install gzip
          command: |
            yum install -y gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-backend \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
            
            url=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicDnsName' --output text | awk '{$1=$1;print}')
            curl -H "Content-Type: text/plain" -H "token: c1b1e3ca-9ad3-4e51-a6ba-8693a7450b4e" --request PUT \
              --data "$url" https://api.memstash.io/values/url
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-frontend \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            backendIP="$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)"
            echo $backendIP >> .circleci/ansible/inventory.txt
            curl -H "Content-Type: text/plain" -H "token: c1b1e3ca-9ad3-4e51-a6ba-8693a7450b4e" --request PUT \
              --data "$backendIP" https://api.memstash.io/values/backendip
      - persist_to_workspace:
          root: .circleci
          paths:
            - ansible/inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.12
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - 1d:5a:71:ae:c3:d0:96:9d:53:4b:d6:eb:46:2e:4c:44
      - attach_workspace:
          at: /tmp
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            ansible-playbook -i /tmp/ansible/inventory.txt .circleci/ansible/configure-server.yml
      - destroy-environment      

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          working_directory: ./backend
          command: |
            echo ENVIROMENT=production > .env
            echo TYPEORM_CONNECTION=postgres >> .env
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> .env
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> .env
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> .env
            echo TYPEORM_HOST=$TYPEORM_HOST >> .env
            echo TYPEORM_PORT=$TYPEORM_PORT >> .env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> .env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> .env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> .env
            npm i > npminstall.log
            npm install oauth-sign >> npminstall.log
            npm run migrations > migration.log
      - run:
            name: Send migration results to memstash
            working_directory: ./backend
            command: |
              if [[ $(grep -i "has been executed successfully" migration.log | wc -l) -ge 1 ]]; then
                curl -H "Content-Type: text/plain" -H "token: c1b1e3ca-9ad3-4e51-a6ba-8693a7450b4e" --request PUT --data "Migration successful" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
              else
                curl -H "Content-Type: text/plain" -H "token: c1b1e3ca-9ad3-4e51-a6ba-8693a7450b4e" --request PUT --data "Migration failed" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
              fi
      - destroy-environment

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt-get -y -qq update
            sudo apt-get -y -qq install python3
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Get backend url
          command: |
            export API_URL=$(echo "https://$(curl -H "token: c1b1e3ca-9ad3-4e51-a6ba-8693a7450b4e" --request GET https://api.memstash.io/values/url):3030")
      - run:
          name: Deploy frontend objects
          working_directory: ./frontend
          command: |
            export API_URL=$(echo "https://$(curl -H "token: c1b1e3ca-9ad3-4e51-a6ba-8693a7450b4e" --request GET https://api.memstash.io/values/url):3030")
            npm i
            npm run build
            bucket="$(aws s3api list-buckets --query "Buckets[0].Name" --output text | awk '{$1=$1;print}')"
            aws s3 sync dist s3://${bucket}/
            bucketurl="$(echo "http://$bucket.s3-website-us-west-2.amazonaws.com")"
            curl -H "Content-Type: text/plain" -H "token: c1b1e3ca-9ad3-4e51-a6ba-8693a7450b4e" --request PUT --data "$bucketurl" https://api.memstash.io/values/bucketurl
      - destroy-environment
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.12
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - 1d:5a:71:ae:c3:d0:96:9d:53:4b:d6:eb:46:2e:4c:44
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible tar gzip ansible nodejs npm
            pip install awscli
      - run:
          name: Deploy backend
          command: |
            [[ ! -d backend ]] && mkdir backend
            envfile="backend/.env"
            echo ENVIROMENT=production > $envfile
            echo TYPEORM_CONNECTION=postgres >> $envfile
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> $envfile
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> $envfile
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> $envfile
            echo TYPEORM_HOST=$TYPEORM_HOST >> $envfile
            echo TYPEORM_PORT=$TYPEORM_PORT >> $envfile
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> $envfile
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> $envfile
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> $envfile
            tar -cvf backend.tar backend
            ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i ansible/inventory.txt .circleci/ansible/deploy-backend.yml
      - destroy-environment

  smoke-test:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update
            sudo apt-get upgrade
            sudo apt-get -y install less
            sudo apt-get -y install curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Get backend url
          command: |
            export API_URL=$(echo "https://$(curl -H "token: c1b1e3ca-9ad3-4e51-a6ba-8693a7450b4e" --request GET https://api.memstash.io/values/url):3030")
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_URL="http://$(curl -H "token: c1b1e3ca-9ad3-4e51-a6ba-8693a7450b4e" --request GET https://api.memstash.io/values/backendip):3030"
            curl "$BACKEND_URL/api/status"
      - run:
          name: Frontend smoke test.
          command: |
            export bucketurl=$(curl -H "token: c1b1e3ca-9ad3-4e51-a6ba-8693a7450b4e" --request GET https://api.memstash.io/values/bucketurl)
            if curl -s ${bucketurl} | grep "Welcome"
            then
              echo "FRONTEND SMOKE TEST SUCCESS"
            else
              echo "FRONTEND SMOKE TEST FAIL"
              exit 1
            fi
      - destroy-environment
      - revert-migrations

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            export oldworkflowid=$(aws cloudformation list-exports --query "Exports[?Name==`WorkflowID`].Value" \
              --no-paginate --output text)
            export oldstacklist=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text))

            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --tags project=udapeople \
              --stack-name "udapeople-cloudfront" \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0-7}"

            if [[ “${oldstacklist[@]}” =~ “${oldworkflowid}” ]]; then
              echo "DELETE OLD CLOUDFORMATION STACKS FOR WORKFLOW ID ${oldworkflowid}"
              aws cloudformation delete-stack --stack-name udapeople-backend-${oldworkflowid}
              aws cloudformation delete-stack --stack-name udapeople-frontend-${oldworkflowid}
            fi

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      - deploy-infrastructure
      #     requires: [build-frontend, build-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [deploy-frontend]
      - smoke-test:
          requires: [deploy-frontend, deploy-backend]
      - cloudfront-update:
          requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]